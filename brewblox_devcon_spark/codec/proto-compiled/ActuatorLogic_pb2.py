# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ActuatorLogic.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import brewblox_pb2 as brewblox__pb2
import nanopb_pb2 as nanopb__pb2
import IoArray_pb2 as IoArray__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x13\x41\x63tuatorLogic.proto\x12\x12\x62lox.ActuatorLogic\x1a\x0e\x62rewblox.proto\x1a\x0cnanopb.proto\x1a\rIoArray.proto\"\xb7\x01\n\x0e\x44igitalCompare\x12/\n\x02op\x18\x01 \x01(\x0e\x32#.blox.ActuatorLogic.DigitalOperator\x12\x32\n\x06result\x18\x02 \x01(\x0e\x32\x1a.blox.ActuatorLogic.ResultB\x06\x8a\xb5\x18\x02(\x01\x12\x17\n\x02id\x18\x03 \x01(\rB\x0b\x8a\xb5\x18\x02\x18\x1b\x92?\x02\x38\x10\x12\'\n\x03rhs\x18\x04 \x01(\x0e\x32\x1a.blox.IoArray.DigitalState\"\xa7\x01\n\rAnalogCompare\x12.\n\x02op\x18\x01 \x01(\x0e\x32\".blox.ActuatorLogic.AnalogOperator\x12\x32\n\x06result\x18\x02 \x01(\x0e\x32\x1a.blox.ActuatorLogic.ResultB\x06\x8a\xb5\x18\x02(\x01\x12\x17\n\x02id\x18\x03 \x01(\rB\x0b\x8a\xb5\x18\x02\x18\x01\x92?\x02\x38\x10\x12\x19\n\x03rhs\x18\x04 \x01(\x11\x42\x0c\x8a\xb5\x18\x03\x10\x80 \x92?\x02\x38 \"\xd5\x02\n\x05\x42lock\x12\x1d\n\x08targetId\x18\x01 \x01(\rB\x0b\x8a\xb5\x18\x02\x18\x06\x92?\x02\x38\x10\x12\x0f\n\x07\x65nabled\x18\x03 \x01(\x08\x12\x38\n\x06result\x18\x04 \x01(\x0e\x32\x1a.blox.ActuatorLogic.ResultB\x0c\x8a\xb5\x18\x02\x30\x01\x8a\xb5\x18\x02(\x01\x12\x19\n\nexpression\x18\x05 \x01(\tB\x05\x92?\x02p@\x12:\n\x07\x64igital\x18\x06 \x03(\x0b\x32\".blox.ActuatorLogic.DigitalCompareB\x05\x92?\x02\x10\x10\x12\x38\n\x06\x61nalog\x18\x07 \x03(\x0b\x32!.blox.ActuatorLogic.AnalogCompareB\x05\x92?\x02\x10\x10\x12\x1d\n\x08\x65rrorPos\x18\x08 \x01(\rB\x0b\x8a\xb5\x18\x02(\x01\x92?\x02\x38\x08\x12#\n\x0e\x64rivenTargetId\x18Z \x01(\x08\x42\x0b\x8a\xb5\x18\x02H\x01\x92?\x02\x18\x03:\r\x8a\xb5\x18\x03\x18\xc2\x02\x8a\xb5\x18\x02H\x0f*\xcb\x03\n\x06Result\x12\x10\n\x0cRESULT_FALSE\x10\x00\x12\x0f\n\x0bRESULT_TRUE\x10\x01\x12\x10\n\x0cRESULT_EMPTY\x10\x02\x12\x1a\n\x16RESULT_EMPTY_SUBSTRING\x10\x03\x12\x1a\n\x16RESULT_BLOCK_NOT_FOUND\x10\x04\x12\x1d\n\x19RESULT_INVALID_DIGITAL_OP\x10\x05\x12\x1c\n\x18RESULT_INVALID_ANALOG_OP\x10\x06\x12$\n RESULT_UNDEFINED_DIGITAL_COMPARE\x10\x08\x12#\n\x1fRESULT_UNDEFINED_ANALOG_COMPARE\x10\x07\x12\"\n\x1eRESULT_UNEXPECTED_OPEN_BRACKET\x10\x0b\x12#\n\x1fRESULT_UNEXPECTED_CLOSE_BRACKET\x10\t\x12\x1f\n\x1bRESULT_UNEXPECTED_CHARACTER\x10\x0c\x12 \n\x1cRESULT_UNEXPECTED_COMPARISON\x10\r\x12\x1e\n\x1aRESULT_UNEXPECTED_OPERATOR\x10\x0e\x12 \n\x1cRESULT_MISSING_CLOSE_BRACKET\x10\n*a\n\x0f\x44igitalOperator\x12\x0f\n\x0bOP_VALUE_IS\x10\x00\x12\x13\n\x0fOP_VALUE_IS_NOT\x10\x01\x12\x11\n\rOP_DESIRED_IS\x10\n\x12\x15\n\x11OP_DESIRED_IS_NOT\x10\x0b*X\n\x0e\x41nalogOperator\x12\x0f\n\x0bOP_VALUE_LE\x10\x00\x12\x0f\n\x0bOP_VALUE_GE\x10\x01\x12\x11\n\rOP_SETTING_LE\x10\n\x12\x11\n\rOP_SETTING_GE\x10\x0b\x62\x06proto3')

_RESULT = DESCRIPTOR.enum_types_by_name['Result']
Result = enum_type_wrapper.EnumTypeWrapper(_RESULT)
_DIGITALOPERATOR = DESCRIPTOR.enum_types_by_name['DigitalOperator']
DigitalOperator = enum_type_wrapper.EnumTypeWrapper(_DIGITALOPERATOR)
_ANALOGOPERATOR = DESCRIPTOR.enum_types_by_name['AnalogOperator']
AnalogOperator = enum_type_wrapper.EnumTypeWrapper(_ANALOGOPERATOR)
RESULT_FALSE = 0
RESULT_TRUE = 1
RESULT_EMPTY = 2
RESULT_EMPTY_SUBSTRING = 3
RESULT_BLOCK_NOT_FOUND = 4
RESULT_INVALID_DIGITAL_OP = 5
RESULT_INVALID_ANALOG_OP = 6
RESULT_UNDEFINED_DIGITAL_COMPARE = 8
RESULT_UNDEFINED_ANALOG_COMPARE = 7
RESULT_UNEXPECTED_OPEN_BRACKET = 11
RESULT_UNEXPECTED_CLOSE_BRACKET = 9
RESULT_UNEXPECTED_CHARACTER = 12
RESULT_UNEXPECTED_COMPARISON = 13
RESULT_UNEXPECTED_OPERATOR = 14
RESULT_MISSING_CLOSE_BRACKET = 10
OP_VALUE_IS = 0
OP_VALUE_IS_NOT = 1
OP_DESIRED_IS = 10
OP_DESIRED_IS_NOT = 11
OP_VALUE_LE = 0
OP_VALUE_GE = 1
OP_SETTING_LE = 10
OP_SETTING_GE = 11


_DIGITALCOMPARE = DESCRIPTOR.message_types_by_name['DigitalCompare']
_ANALOGCOMPARE = DESCRIPTOR.message_types_by_name['AnalogCompare']
_BLOCK = DESCRIPTOR.message_types_by_name['Block']
DigitalCompare = _reflection.GeneratedProtocolMessageType('DigitalCompare', (_message.Message,), {
  'DESCRIPTOR' : _DIGITALCOMPARE,
  '__module__' : 'ActuatorLogic_pb2'
  # @@protoc_insertion_point(class_scope:blox.ActuatorLogic.DigitalCompare)
  })
_sym_db.RegisterMessage(DigitalCompare)

AnalogCompare = _reflection.GeneratedProtocolMessageType('AnalogCompare', (_message.Message,), {
  'DESCRIPTOR' : _ANALOGCOMPARE,
  '__module__' : 'ActuatorLogic_pb2'
  # @@protoc_insertion_point(class_scope:blox.ActuatorLogic.AnalogCompare)
  })
_sym_db.RegisterMessage(AnalogCompare)

Block = _reflection.GeneratedProtocolMessageType('Block', (_message.Message,), {
  'DESCRIPTOR' : _BLOCK,
  '__module__' : 'ActuatorLogic_pb2'
  # @@protoc_insertion_point(class_scope:blox.ActuatorLogic.Block)
  })
_sym_db.RegisterMessage(Block)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _DIGITALCOMPARE.fields_by_name['result']._options = None
  _DIGITALCOMPARE.fields_by_name['result']._serialized_options = b'\212\265\030\002(\001'
  _DIGITALCOMPARE.fields_by_name['id']._options = None
  _DIGITALCOMPARE.fields_by_name['id']._serialized_options = b'\212\265\030\002\030\033\222?\0028\020'
  _ANALOGCOMPARE.fields_by_name['result']._options = None
  _ANALOGCOMPARE.fields_by_name['result']._serialized_options = b'\212\265\030\002(\001'
  _ANALOGCOMPARE.fields_by_name['id']._options = None
  _ANALOGCOMPARE.fields_by_name['id']._serialized_options = b'\212\265\030\002\030\001\222?\0028\020'
  _ANALOGCOMPARE.fields_by_name['rhs']._options = None
  _ANALOGCOMPARE.fields_by_name['rhs']._serialized_options = b'\212\265\030\003\020\200 \222?\0028 '
  _BLOCK.fields_by_name['targetId']._options = None
  _BLOCK.fields_by_name['targetId']._serialized_options = b'\212\265\030\002\030\006\222?\0028\020'
  _BLOCK.fields_by_name['result']._options = None
  _BLOCK.fields_by_name['result']._serialized_options = b'\212\265\030\0020\001\212\265\030\002(\001'
  _BLOCK.fields_by_name['expression']._options = None
  _BLOCK.fields_by_name['expression']._serialized_options = b'\222?\002p@'
  _BLOCK.fields_by_name['digital']._options = None
  _BLOCK.fields_by_name['digital']._serialized_options = b'\222?\002\020\020'
  _BLOCK.fields_by_name['analog']._options = None
  _BLOCK.fields_by_name['analog']._serialized_options = b'\222?\002\020\020'
  _BLOCK.fields_by_name['errorPos']._options = None
  _BLOCK.fields_by_name['errorPos']._serialized_options = b'\212\265\030\002(\001\222?\0028\010'
  _BLOCK.fields_by_name['drivenTargetId']._options = None
  _BLOCK.fields_by_name['drivenTargetId']._serialized_options = b'\212\265\030\002H\001\222?\002\030\003'
  _BLOCK._options = None
  _BLOCK._serialized_options = b'\212\265\030\003\030\302\002\212\265\030\002H\017'
  _RESULT._serialized_start=789
  _RESULT._serialized_end=1248
  _DIGITALOPERATOR._serialized_start=1250
  _DIGITALOPERATOR._serialized_end=1347
  _ANALOGOPERATOR._serialized_start=1349
  _ANALOGOPERATOR._serialized_end=1437
  _DIGITALCOMPARE._serialized_start=89
  _DIGITALCOMPARE._serialized_end=272
  _ANALOGCOMPARE._serialized_start=275
  _ANALOGCOMPARE._serialized_end=442
  _BLOCK._serialized_start=445
  _BLOCK._serialized_end=786
# @@protoc_insertion_point(module_scope)
