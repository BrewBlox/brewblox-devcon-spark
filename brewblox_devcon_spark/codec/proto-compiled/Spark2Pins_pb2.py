# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Spark2Pins.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import brewblox_pb2 as brewblox__pb2
import nanopb_pb2 as nanopb__pb2
import IoArray_pb2 as IoArray__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='Spark2Pins.proto',
  package='blox',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x10Spark2Pins.proto\x12\x04\x62lox\x1a\x0e\x62rewblox.proto\x1a\x0cnanopb.proto\x1a\rIoArray.proto\"\xf1\x02\n\nSpark2Pins\x12\x36\n\x04pins\x18\x01 \x03(\x0b\x32\x16.blox.Spark2Pins.IoPinB\x10\x92?\x02\x10\x04\x92?\x02x\x01\x8a\xb5\x18\x02(\x01\x12\x12\n\nsoundAlarm\x18\x05 \x01(\x08\x12\x33\n\x08hardware\x18\x08 \x01(\x0e\x32\x19.blox.Spark2Pins.HardwareB\x06\x8a\xb5\x18\x02(\x01\x1a\x9e\x01\n\x05IoPin\x12\"\n\x07\x62ottom1\x18\x01 \x01(\x0b\x32\x0f.blox.IoChannelH\x00\x12\"\n\x07\x62ottom2\x18\x02 \x01(\x0b\x32\x0f.blox.IoChannelH\x00\x12\"\n\x07\x62ottom3\x18\x03 \x01(\x0b\x32\x0f.blox.IoChannelH\x00\x12\"\n\x07\x62ottom0\x18\x04 \x01(\x0b\x32\x0f.blox.IoChannelH\x00\x42\x05\n\x03Pin\"2\n\x08Hardware\x12\x0e\n\nunknown_hw\x10\x00\x12\n\n\x06Spark1\x10\x01\x12\n\n\x06Spark2\x10\x02:\r\x8a\xb5\x18\x03\x18\xc0\x02\x8a\xb5\x18\x02H\nb\x06proto3')
  ,
  dependencies=[brewblox__pb2.DESCRIPTOR,nanopb__pb2.DESCRIPTOR,IoArray__pb2.DESCRIPTOR,])



_SPARK2PINS_HARDWARE = _descriptor.EnumDescriptor(
  name='Hardware',
  full_name='blox.Spark2Pins.Hardware',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='unknown_hw', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='Spark1', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='Spark2', index=2, number=2,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=376,
  serialized_end=426,
)
_sym_db.RegisterEnumDescriptor(_SPARK2PINS_HARDWARE)


_SPARK2PINS_IOPIN = _descriptor.Descriptor(
  name='IoPin',
  full_name='blox.Spark2Pins.IoPin',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='bottom1', full_name='blox.Spark2Pins.IoPin.bottom1', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='bottom2', full_name='blox.Spark2Pins.IoPin.bottom2', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='bottom3', full_name='blox.Spark2Pins.IoPin.bottom3', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='bottom0', full_name='blox.Spark2Pins.IoPin.bottom0', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='Pin', full_name='blox.Spark2Pins.IoPin.Pin',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=216,
  serialized_end=374,
)

_SPARK2PINS = _descriptor.Descriptor(
  name='Spark2Pins',
  full_name='blox.Spark2Pins',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pins', full_name='blox.Spark2Pins.pins', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\222?\002\020\004\222?\002x\001\212\265\030\002(\001'), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='soundAlarm', full_name='blox.Spark2Pins.soundAlarm', index=1,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='hardware', full_name='blox.Spark2Pins.hardware', index=2,
      number=8, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\212\265\030\002(\001'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_SPARK2PINS_IOPIN, ],
  enum_types=[
    _SPARK2PINS_HARDWARE,
  ],
  serialized_options=_b('\212\265\030\003\030\300\002\212\265\030\002H\n'),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=72,
  serialized_end=441,
)

_SPARK2PINS_IOPIN.fields_by_name['bottom1'].message_type = IoArray__pb2._IOCHANNEL
_SPARK2PINS_IOPIN.fields_by_name['bottom2'].message_type = IoArray__pb2._IOCHANNEL
_SPARK2PINS_IOPIN.fields_by_name['bottom3'].message_type = IoArray__pb2._IOCHANNEL
_SPARK2PINS_IOPIN.fields_by_name['bottom0'].message_type = IoArray__pb2._IOCHANNEL
_SPARK2PINS_IOPIN.containing_type = _SPARK2PINS
_SPARK2PINS_IOPIN.oneofs_by_name['Pin'].fields.append(
  _SPARK2PINS_IOPIN.fields_by_name['bottom1'])
_SPARK2PINS_IOPIN.fields_by_name['bottom1'].containing_oneof = _SPARK2PINS_IOPIN.oneofs_by_name['Pin']
_SPARK2PINS_IOPIN.oneofs_by_name['Pin'].fields.append(
  _SPARK2PINS_IOPIN.fields_by_name['bottom2'])
_SPARK2PINS_IOPIN.fields_by_name['bottom2'].containing_oneof = _SPARK2PINS_IOPIN.oneofs_by_name['Pin']
_SPARK2PINS_IOPIN.oneofs_by_name['Pin'].fields.append(
  _SPARK2PINS_IOPIN.fields_by_name['bottom3'])
_SPARK2PINS_IOPIN.fields_by_name['bottom3'].containing_oneof = _SPARK2PINS_IOPIN.oneofs_by_name['Pin']
_SPARK2PINS_IOPIN.oneofs_by_name['Pin'].fields.append(
  _SPARK2PINS_IOPIN.fields_by_name['bottom0'])
_SPARK2PINS_IOPIN.fields_by_name['bottom0'].containing_oneof = _SPARK2PINS_IOPIN.oneofs_by_name['Pin']
_SPARK2PINS.fields_by_name['pins'].message_type = _SPARK2PINS_IOPIN
_SPARK2PINS.fields_by_name['hardware'].enum_type = _SPARK2PINS_HARDWARE
_SPARK2PINS_HARDWARE.containing_type = _SPARK2PINS
DESCRIPTOR.message_types_by_name['Spark2Pins'] = _SPARK2PINS
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Spark2Pins = _reflection.GeneratedProtocolMessageType('Spark2Pins', (_message.Message,), dict(

  IoPin = _reflection.GeneratedProtocolMessageType('IoPin', (_message.Message,), dict(
    DESCRIPTOR = _SPARK2PINS_IOPIN,
    __module__ = 'Spark2Pins_pb2'
    # @@protoc_insertion_point(class_scope:blox.Spark2Pins.IoPin)
    ))
  ,
  DESCRIPTOR = _SPARK2PINS,
  __module__ = 'Spark2Pins_pb2'
  # @@protoc_insertion_point(class_scope:blox.Spark2Pins)
  ))
_sym_db.RegisterMessage(Spark2Pins)
_sym_db.RegisterMessage(Spark2Pins.IoPin)


_SPARK2PINS.fields_by_name['pins']._options = None
_SPARK2PINS.fields_by_name['hardware']._options = None
_SPARK2PINS._options = None
# @@protoc_insertion_point(module_scope)
