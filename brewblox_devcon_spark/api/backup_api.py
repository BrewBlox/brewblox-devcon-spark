"""
REST API for handling backups of controller data
"""


import logging

from fastapi import APIRouter

from .. import backup_storage
from ..models import Backup, BackupApplyResult, BackupIdentity

LOGGER = logging.getLogger(__name__)


router = APIRouter(prefix='/blocks/backup', tags=['Backup'])


@router.post('/save')
async def backup_save() -> Backup:
    """
    Export service blocks to a portable format.
    """
    backup = await backup_storage.CV.get().save_portable()
    return backup


@router.post('/load')
async def backup_load(args: Backup) -> BackupApplyResult:
    """
    Import service blocks from a backup generated by /blocks/backup/save.
    """
    result = await backup_storage.CV.get().load_portable(args)
    return result


@router.post('/stored/all')
async def backup_stored_all() -> list[BackupIdentity]:
    """
    List all stored backup files.
    """
    result = await backup_storage.CV.get().all()
    return result


@router.post('/stored/download')
async def backup_stored_download(args: BackupIdentity) -> Backup:
    """
    Download stored backup without applying it.
    """
    result = await backup_storage.CV.get().read()
    return result


@router.post('/stored/upload')
async def backup_stored_upload(args: Backup) -> Backup:
    """
    Upload stored backup without applying it.
    """
    result = await backup_storage.CV.get().write(args)
    return result


@router.post('/stored/save')
async def backup_stored_save(args: BackupIdentity) -> Backup:
    """
    Create new stored backup.
    """
    result = await backup_storage.CV.get().write(args)
    return result


@router.post('/stored/load')
async def backup_stored_load(args: BackupIdentity) -> BackupApplyResult:
    """
    Apply stored backup.
    """
    result = await backup_storage.CV.get().load(args)
    return result
